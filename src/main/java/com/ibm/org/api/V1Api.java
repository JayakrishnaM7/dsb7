/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.ibm.org.api;

import com.ibm.org.model.Account;
import com.ibm.org.model.InitPaymentRequest;
import com.ibm.org.model.Retrivepayment;
import com.ibm.org.model.Updatepayment;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@Validated
@Api(value = "v1", description = "the v1 API")
public interface V1Api {
    

    @ApiOperation(value = "", nickname = "v1Bian3CorePayment1000GetAccountbalanceAccountIdGet", notes = "retrive payment details by paymentorderid", response = Account.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Account.class) })
    @RequestMapping(value = "/v1/bian-3/core/payment/10.0.0/getAccountbalance/{AccountId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> v1Bian3CorePayment1000GetAccountbalanceAccountIdGet(@ApiParam(value = "",required=true) @PathVariable("AccountId") String accountId); 


    @ApiOperation(value = "", nickname = "v1Bian3CorePayment1000InitpaymentPost", notes = "", response = InitPaymentRequest.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created.Initiated Successfully", response = InitPaymentRequest.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server"),
        @ApiResponse(code = 503, message = "Service Unavailable") })
    @RequestMapping(value = "/v1/bian-3/core/payment/10.0.0/initpayment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InitPaymentRequest> v1Bian3CorePayment1000InitpaymentPost(@ApiParam(value = "" ,required=true )  @Valid @RequestBody InitPaymentRequest initPaymentRequest); 


    @ApiOperation(value = "", nickname = "v1Bian3CorePayment1000RetrivepaymentPaymentorderidGet", notes = "retrive payment details by paymentorderid", response = Retrivepayment.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success", response = Retrivepayment.class) })
    @RequestMapping(value = "/v1/bian-3/core/payment/10.0.0/retrivepayment/{paymentorderid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Retrivepayment> v1Bian3CorePayment1000RetrivepaymentPaymentorderidGet(@ApiParam(value = "",required=true) @PathVariable("paymentorderid") String paymentorderid); 


    @ApiOperation(value = "", nickname = "v1Bian3CorePayment1000UpdatepaymentPut", notes = "", response = InitPaymentRequest.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created.Initiated Successfully", response = InitPaymentRequest.class),
        @ApiResponse(code = 400, message = "Bad Request"),
        @ApiResponse(code = 401, message = "Unauthorized"),
        @ApiResponse(code = 403, message = "Forbidden"),
        @ApiResponse(code = 404, message = "Not Found"),
        @ApiResponse(code = 500, message = "Internal Server"),
        @ApiResponse(code = 503, message = "Service Unavailable") })
    @RequestMapping(value = "/v1/bian-3/core/payment/10.0.0/updatepayment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InitPaymentRequest> v1Bian3CorePayment1000UpdatepaymentPut(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Updatepayment updatepayment); 

}
